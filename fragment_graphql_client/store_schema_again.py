# Generated by fragment (with the help of ariadne-codegen)
# Source: queries/

from typing import Any, Literal, Union

from pydantic import Field

from .base_model import BaseModel


class StoreSchemaAgain(BaseModel):
    store_schema: Union[
        "StoreSchemaAgainStoreSchemaBadRequestError",
        "StoreSchemaAgainStoreSchemaInternalError",
        "StoreSchemaAgainStoreSchemaStoreSchemaResult",
    ] = Field(alias="storeSchema", discriminator="typename__")


class StoreSchemaAgainStoreSchemaBadRequestError(BaseModel):
    typename__: Literal["BadRequestError"] = Field(alias="__typename")


class StoreSchemaAgainStoreSchemaInternalError(BaseModel):
    typename__: Literal["InternalError"] = Field(alias="__typename")


class StoreSchemaAgainStoreSchemaStoreSchemaResult(BaseModel):
    typename__: Literal["StoreSchemaResult"] = Field(alias="__typename")
    schema_: "StoreSchemaAgainStoreSchemaStoreSchemaResultSchema" = Field(
        alias="schema"
    )


class StoreSchemaAgainStoreSchemaStoreSchemaResultSchema(BaseModel):
    key: Any
    name: str
    version: "StoreSchemaAgainStoreSchemaStoreSchemaResultSchemaVersion"


class StoreSchemaAgainStoreSchemaStoreSchemaResultSchemaVersion(BaseModel):
    created: Any
    version: int


StoreSchemaAgain.model_rebuild()
StoreSchemaAgainStoreSchemaStoreSchemaResult.model_rebuild()
StoreSchemaAgainStoreSchemaStoreSchemaResultSchema.model_rebuild()
